// Process ES6 on the fly
require('babel/register');

// // Include every file in gulp/scripts
// require('require-dir')('gulp/scripts');

'use strict';

var gulp = require('gulp');
var plugins = require('gulp-load-plugins')();
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');

// JS
var cache = require('gulp-cached');

// SASS
var sourcemaps = require('gulp-sourcemaps');
var sass = require('gulp-sass');
var autoprefixer = require('gulp-autoprefixer');
var gutil = require('gulp-util');

// Serve
var watch = require('gulp-watch');

// Delete Build
var rimraf = require('rimraf');

// Test
var karma = require('karma').server;

// CSS
var csso = require('gulp-csso');
var rename = require('gulp-rename');

// HTML
var htmlreplace = require('gulp-html-replace');

// Bundle
var shell = require('gulp-shell');

// Uglify
var uglify = require('gulp-uglify');

const config = {
  port: {
    dev: 8080,
    dist: 8081
  },

  path: {
    js: {
      files: 'src/**/*.js',
      entry: 'src/app.js'
    },
    sass: {
      files: 'src/**/*.scss'
    },
    html: {
      files: 'index.html'
    },
    tests: {
      files: 'karma.conf.js'
    }
  },

  dev: {
    dir: 'dev',
    js: 'dev/js',
    css: 'dev/css'
  },

  dist: {
    dir: 'dist',
    js: 'dist/js',
    css: 'dist/css',
    html: 'dist'
  },

  autoprefixer: {
    browsers: ['last 2 versions']
  },

  htmlReplace: {
    'js': 'dist/js/bundle.js',
    'css': 'dist/css/bundle.css'
  },

  handleError: gutil.log,
};

// SERVER:DEV
// BrowserSync Server
gulp.task('browser-sync', function() {
  browserSync.init([
    './build/css/*.css',
    './build/**/*.js',
    './**/*.html'
  ],
  {
    notify: false,
    server: {
      baseDir: ['./']
    },
    port: config.port.dev,
    browser: [],
    tunnel: false
  });
});

// JS:DEV
// JSX
gulp.task('js', function() {
  return gulp.src(config.path.js.files)
    .pipe(cache('js')) // Process only changed files
    .pipe(gulp.dest(config.dev.js));
});

// CSS:DEV
// Sass
gulp.task('sass', function() {
  return gulp.src(config.path.sass.files)
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(sourcemaps.write({includeContent: false}))
    .pipe(sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(autoprefixer(config.autoprefixer))
    .on('error', config.handleError)
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(config.dev.css))
    .on('error', config.handleError);
});

// DEV
// serve task
gulp.task('serve', ['browser-sync', 'js', 'sass'], function() {
  gulp.watch(config.path.sass.files, ['sass']);
  gulp.watch(config.path.js.files, ['js']);
});

// CLEAN:DEV
// Delete build Directory
gulp.task('delete-build', function() {
  rimraf(config.dev.dir, config.handleError);
});

// ??DELETE??
// build (no server)
gulp.task('build', ['js', 'sass']);

// Default
gulp.task('default', ['serve']);

// TEST
// Tests
gulp.task('test', function(done) {
  karma.start({
    configFile: config.path.tests.files
  }, done);
});

// DISTRIBUTION TASKS
//===============================================

// CLEAN:PROD
// Delete dist Directory
gulp.task('delete-dist', function() {
  rimraf(config.dist.dir, config.handleError);
});

// CSS:DIST
// CSS
gulp.task('css', function() {
  return gulp.src(config.path.sass.files)
    .pipe(sass())
    .pipe(autoprefixer(config.autoprefixer))
    .pipe(gulp.dest(config.dist.css))

    // Merge into bundle.css
    .on('error', config.handleError);
});

// HTML:DIST
// Copy index.html to 'dist'
gulp.task('html', function() {
  gulp.src(config.path.html.files)
    .pipe(htmlreplace(config.htmlReplace))
    .pipe(gulp.dest(config.dist.path))
    .on('error', config.handleError);
});

var jspm = require('gulp-jspm');

// JS:DIST
// Bundle with jspm
gulp.task('bundle', function() {
  gulp.src(config.path.js.entry)
    .pipe(jspm())
    .pipe(rename('bundle.js'))
    .pipe(gulp.dest(config.dist.js));
});

// shell.task([
//   'jspm bundle-sfx build/app.js!jsx dist/js/app.js'
// ])

// INCLUDE WITH ABOVE
// Uglify the bundle
gulp.task('uglify', function() {
  return gulp.src('./dist/app.js')
    .pipe(sourcemaps.init({loadMaps: true}))
    .pipe(uglify())
    .pipe(sourcemaps.write('.'))
    .pipe(rename('bundle.js'))
    .pipe(gulp.dest(config.dist.js))
    .on('error', config.handleError);
});

// DIST
gulp.task('dist', function() {
  runSequence('delete-dist', 'build', ['css', 'html', 'bundle'], 'uglify');
});

// SERVER:PROD
