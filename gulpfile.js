// // Process ES6 on the fly
// require('babel/register');
//
// // Include every file in gulp/scripts
// require('require-dir')('gulp/scripts');

'use strict';

var gulp = require('gulp');
var plugins = require('gulp-load-plugins')();
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');

// JS
var cache = require('gulp-cached');

// SASS
var sourcemaps = require('gulp-sourcemaps');
var sass = require('gulp-sass');
var autoprefixer = require('gulp-autoprefixer');
var gutil = require('gulp-util');

// Serve
var watch = require('gulp-watch');

// Delete Build
var rimraf = require('rimraf');

// Test
var karma = require('karma').server;

// CSS
var csso = require('gulp-csso');
var rename = require('gulp-rename');

// HTML
var htmlreplace = require('gulp-html-replace');

// Bundle
var shell = require('gulp-shell');

// Uglify
var uglify = require('gulp-uglify');

// SERVER:DEV
// BrowserSync Server
gulp.task('browser-sync', function() {
  browserSync.init([
    './build/css/*.css',
    './build/**/*.js',
    './**/*.html'
  ],
  {
    notify: false,
    server: {
      baseDir: ['./']
    },
    port: 3500,
    browser: [],
    tunnel: false
  });
});

// JS:DEV
// JSX
gulp.task('js', function() {
  return gulp.src('src/**/*.js')
    .pipe(cache('js')) // Process only changed files
    .pipe(gulp.dest('build'));
});

// CSS:DEV
// Sass
gulp.task('sass', function() {
  return gulp.src('./src/sass/main.scss')
    .pipe(sourcemaps.init())
    .pipe(sass())
    .pipe(sourcemaps.write({includeContent: false}))
    .pipe(sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe(autoprefixer({
      browsers: ['last 2 versions']
    }))
    .on('error', gutil.log)
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest('./build/css'))
    .on('error', gutil.log);
});

// DEV
// serve task
gulp.task('serve', ['browser-sync', 'js', 'sass'], function(cb) {

  watch('./src/sass/**/*.scss', {
    name: 'SASS'
  }, function() {
    gulp.start('sass');
  });

  watch('./src/**/*.js', {
    name: 'JS'
  }, function() {
    gulp.start('js');
  });
});

// CLEAN:DEV
// Delete build Directory
gulp.task('delete-build', function() {
  rimraf('./build', function(err) {
    gutil.log(err);
  });
});

// ??DELETE??
// build (no server)
gulp.task('build', ['js', 'sass']);

// Default
gulp.task('default', ['serve']);

// TEST
// Tests
gulp.task('test', function(done) {
  karma.start({
    configFile: __dirname + '/karma.conf.js'
  }, done);
});

// DISTRIBUTION TASKS
//===============================================

// CLEAN:PROD
// Delete dist Directory
gulp.task('delete-dist', function() {
  rimraf('./dist', function(err) {
    gutil.log(err);
  });
});

// CSS:DIST
// CSS
gulp.task('css', function() {
  return gulp.src('./build/css/main.css')
    .pipe(gulp.dest('./dist/css'))
    .pipe(csso())
    .pipe(rename('main.min.css'))
    .pipe(gulp.dest('./dist/css'))
    .on('error', gutil.log);
});

// HTML:DIST
// Copy index.html to 'dist'
gulp.task('html', function() {
  gulp.src(['./index.html'])
    .pipe(htmlreplace({
      'js': 'js/app.js',
      'css': 'css/main.css'
    }))
    .pipe(gulp.dest('./dist'))
    .on('error', gutil.log);
});

// JS:DIST
// Bundle with jspm
gulp.task('bundle', ['js'], shell.task([
  'jspm bundle-sfx build/app.js!jsx dist/js/app.js'
]));

// INCLUDE WITH ABOVE
// Uglify the bundle
gulp.task('uglify', function() {
  return gulp.src('./dist/app.js')
    .pipe(sourcemaps.init({loadMaps: true}))
    .pipe(uglify())
    .pipe(sourcemaps.write('.'))
    .pipe(rename('app.min.js'))
    .pipe(gulp.dest('./dist/js'))
    .on('error', gutil.log);
});

// DIST
gulp.task('dist', function() {
  runSequence('delete-dist', 'build', ['css', 'html', 'bundle'], 'uglify');
});

// SERVER:PROD
