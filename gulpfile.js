'use strict';

var gulp = require('gulp');
var $ = require('gulp-load-plugins')();
var rimraf = require('rimraf');
var browserSync = require('browser-sync');
var runSequence = require('run-sequence');
var karma = require('karma').server;

var onError = function (err) {
  $.util.beep();
  console.log(err);
};

// Settings
var BUILD = './build';
var SRC = './src';


// DEVELOPMENT TASKS
//================================================

/*
* 1. Setup a webserver with livereload using BrowserSync
* 2. CSS gets compiled and autoprefixed
* */

// BrowserSync Server
gulp.task('browser-sync', function() {
  browserSync.init([
    SRC + '/css/*.css',
    SRC + '/js/**/*.js',
    SRC + '/js/**/*.jsx',
    './**/*.html'
  ],
  {
    notify: false,
    server: {
      baseDir: [SRC]
    },
    port: 3500,
    browser: [],
    tunnel: false
  });
});

// Sass
gulp.task('sass', function() {
  return gulp.src(SRC + '/sass/main.scss')
    .pipe($.plumber({
        errorHandler: onError
      }))
    .pipe($.sourcemaps.init())
    .pipe($.sass())
    .pipe($.sourcemaps.write({includeContent: false}))
    .pipe($.sourcemaps.init({loadMaps: true})) // Load sourcemaps generated by sass
    .pipe($.autoprefixer({
      browsers: ['last 2 versions']
    }))
    .pipe($.sourcemaps.write('.'))
    .pipe($.plumber.stop())
    .pipe(gulp.dest(SRC + '/css'));
});


// serve task
gulp.task('serve', ['browser-sync', 'sass'] , function() {

  $.watch(
    SRC + '/sass/**/*.scss',
    {
      name: 'SASS'
    },
    function() {
      gulp.start('sass');
    }
  );

});




// Tests
gulp.task('test', function(done) {
  karma.start({
    configFile: __dirname + '/karma.conf.js'
  }, done);
});

// Default
gulp.task('default', ['serve']);

// DISTRIBUTION TASKS
//===============================================

// Delete build Directory
gulp.task('clean', function() {
  rimraf(BUILD, onError);
});

// CSS
gulp.task('css', function() {
  return gulp.src(SRC + '/css/main.css')
    .pipe($.plumber({
      errorHandler: onError
    }))
    .pipe(gulp.dest(BUILD + '/css'))
    .pipe($.csso())
    .pipe($.rename('main.min.css'))
    .pipe($.plumber.stop())
    .pipe(gulp.dest(BUILD + '/css'));
});

// Copy index.html to 'build'
gulp.task('html', function() {
  gulp.src(['./index.html'])
    .pipe(gulp.dest(BUILD))
    .on('error', onError);
});

gulp.task('toCommonjs', function() {
  return gulp.src(SRC + '/js/**/*.js')
    .pipe($['6to5']({modules: 'common'}))
    .pipe(gulp.dest(SRC + '/common/js'));
});

// HTML pages
gulp.task('pages', function() {
  var render = $.render({
    template: './src/index.html'
  })
    .on('error', onError);

  return gulp.src(SRC + '/js/components/Feed.js')
    .pipe(render)
    .pipe(gulp.dest(BUILD));
});


// Bundle with jspm
gulp.task('bundle', $.shell.task(
  [
    'jspm bundle-sfx js/app build/js/app.js',
    'jspm bundle-sfx js/app build/js/app.min.js --minify'
  ]
));


gulp.task('build', function() {
  runSequence(
    'clean',
    ['css', 'html', 'bundle']
  );
});